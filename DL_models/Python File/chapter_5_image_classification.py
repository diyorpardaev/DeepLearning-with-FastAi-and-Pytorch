# -*- coding: utf-8 -*-
"""chapter_5_Image_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zNr8wM6s6zg4kAYXyY7Ep5z_yLM3zKQm
"""

from fastai.vision.all import *

from fastai.vision.all import *
path = untar_data(URLs.PETS)

path.ls()

(path/"images").ls()

fname = (path/'images').ls()[0]

re.findall(r'(.+)_\d+.jpg$', fname.name)

pets = DataBlock(blocks = (ImageBlock, CategoryBlock),
                 get_items = get_image_files,
                 splitter = RandomSplitter(seed=42),
                 get_y = using_attr(RegexLabeller(r'(.+)_\d+.jpg$'), 'name'),
                 item_tfms = Resize(460),
                 batch_tfms = aug_transforms(size=224, min_scale=0.75))
dls = pets.dataloaders(path/"images")

item_tfms = Resize(460),
batch_tfms = aug_transforms(size=224, min_scale=0.75))

dls.show_batch(nrows=1, ncols=3)

pets1 = DataBlock(blocks = (ImageBlock, CategoryBlock),
                 get_items=get_image_files,
                 splitter=RandomSplitter(seed=42),
                 get_y=using_attr(RegexLabeller(r'(.+)_\d+.jpg$'), 'name'))
pets1.summary(path/"images")

learn = cnn_learner(dls, resnet34, metrics = error_rate)
learn.fine_tune(2)

x, y = dls.one_batch()

y

preds,_ = learn.get_preds(dl=[(x, y)])
preds[0]

len(preds[0]),preds[0].sum()

plot_function(torch.sigmoid, min=-4,max=4)

acts = torch.randn((6, 2))*2
acts

acts.sigmoid()

(acts[:,0]-acts[:,1]).sigmoid()

def softmax(x): return exp(x)/exp(x).sum(dim=1, keepdim=True)

sm_acts = torch.softmax(acts, dim=1)
sm_acts

def mnist_loss(inputs, targets):
  inputs = inputs.sigmoid()
  return torch.where(targets==1, 1-inputs, inputs)

targ = tensor([0, 1, 0, 1, 1, 0])

sm_acts

idx = range(6)
sm_acts[idx, targ]

-sm_acts[idx, targ]

F.nll_loss(sm_acts, targ, reduction='none')

plot_function(torch.log, min=0, max=4)

y = b**a
a = log(y, b)

loss_func = nn.CrossEntropyLoss()

loss_func(acts, targ)

F.cross_entropy(acts, targ)

nn.CrossEntropyLoss(reduction='none')(acts, targ)

interp = ClassificationInterpretation.from_learner(learn)
interp.plot_confusion_matrix(figsize=(12, 12), dpi=60)

interp.most_confused(min_val=5)

learn = cnn_learner(dls, resnet34, metrics=error_rate)
learn.fine_tune(1, base_lr=0.1)

learn = cnn_learner(dls, resnet34, metrics=error_rate)
lr_min, lr_steep = learn.lr_find(suggest_funcs=(minimum, steep))

# ushbu kod kitobdagidan sal farq qiladi, chunki kitob chiqqandan keyin yangilanishlar bo'lgan, biz sizga eng oxirgi variantini taqdim etdik.

print(f"Minimum/10: {lr_min:.2e}, steepest point: {lr_steep:.2e}")

learn = cnn_learner(dls, resnet34, metrics=error_rate)
learn.fine_tune(2, base_lr=3e-3)

learn.fine_tune??

learn = cnn_learner(dls, resnet34, metrics=error_rate)
learn.fit_one_cycle(3, 3e-3)

learn.unfreeze()

learn.lr_find()

learn.fit_one_cycle(6, lr_max=1e-5)

learn = cnn_learner(dls, resnet34, metrics=error_rate)
learn.fit_one_cycle(3, 3e-3)
learn.unfreeze()
learn.fit_one_cycle(12, lr_max=slice(1e-6,1e-4))

learn.recorder.plot_loss()

from fastai.callback.fp16 import *
learn = cnn_learner(dls, resnet50, metrics=error_rate).to_fp16()
learn.fine_tune(6, freeze_epochs=3)